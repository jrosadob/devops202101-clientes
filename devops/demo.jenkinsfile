pipeline {
            
    agent any

    environment {
        PROJECT_ID = 'devops202101'
        CLUSTER_NAME = 'devops202101'
        LOCATION = 'us-east4-c'
        CREDENTIALS_ID = 'gke2'
    }

    stages {

        stage('Initial Notification') {
            steps {
                    //put webhook for your notification channel 
                    echo 'Pipeline Start Notification'
                    sh 'echo "pruebas"; exit 0'
                    sh "echo ${GIT_BRANCH}"
            }
            post {
                always {
                    echo 'Siempre se ejecuta'
                    deleteDir() /* clean up our workspace */
                    sendEmail("One way or another, I have finished")
                }
                success {
                    echo 'Se ejecutará si el build no falla'
                    sendEmail("I succeeded!")
                }
                failure {
                    echo 'Se ejecutará si el build falla'
                    echo 'ERROR'
                    sendEmail("ERROR")
                }
                unstable {
                    echo 'Se ejecutará si el job se marca como inestable'
                    echo 'I am unstable :/'
                    sendEmail("I am unstable :/")
                }
                changed {
                    echo 'Se ejecutará si fallo-->OK'
                    echo 'Se ejecutará si OK-->fallo'
                    sendEmail("I am unstable :/")
                }
            }
        }


      
      // Execute when branch = 'master'
      stage("BASIC WHEN - Branch") {
         when {
            expression { GIT_BRANCH.contains("/features/") }
        }
         steps {
            echo 'BASIC WHEN - Master Branch!'
         }
      }


        stage('Build') {
            agent {
                docker { image 'maven:3.6.3-openjdk-11-slim' }
            }
            
            steps {
                sh 'printenv'
                
            }

            post{
                success {
                    archiveArtifacts artifacts: 'target/lab01-0.0.1-SNAPSHOT.jar', fingerprint: true, onlyIfSuccessful: true
                }
            }
        }
      
    


    stage('Code Analysis') {           
            steps {
               //put your code scanner 
                echo 'Code Scanning and Analysis'
            }
        }
 
        stage('Robot Testing') {
            steps {
                //put your Testing
                echo 'Robot Testing Start'
            }
            post{
                success{
                    echo "Robot Testing Successfully"
                }
                failure{
                    echo "Robot Testing Failed"
                }
            }
        }

        stage("Build"){
            steps {
                echo "Docker Build"
                echo "Docker Push"
            }
            post{
                success{
                    echo "Build and Push Successfully"
                }
                failure{
                    echo "Build and Push Failed"
                }
            }
        }

        stage('Image Scan') {
            steps {
                //Put your image scanning tool 
                echo 'Image Scanning Start'
            }
            post{
                success{
                    echo "Image Scanning Successfully"
                }
                failure{
                    echo "Image Scanning Failed"
                }
            }
        }


        stage("Deploy to Production"){
            when {
                expression {
                    return GIT_BRANCH=='origin/main'
                }
            }
            steps { 
                 echo 'Deploy to Production'
 
             }
            post{
                success{
                    echo "Successfully deployed to Production"
                }
                failure{
                    echo "Failed deploying to Production"
                    sendEmail("Failed")
                }
            }
        }

        stage("Deploy to Staging"){
            when {
                branch 'staging'
            }
            steps {
                 echo 'staging'
             }
            post{
                success{
                    echo "Successfully deployed to Staging"
                }
                failure{
                    echo "Failed deploying to Staging"
                }
            }
        }
    }
    post {
        // Always runs. And it runs before any of the other post conditions.
        always {
            // Let's wipe out the workspace before we finish!
            deleteDir()
        }
        success {
            sendEmail("Successful");
        }
        unstable {
            sendEmail("Unstable");
        }
        failure {
            sendEmail("Failed");
        }
    }

}

 def sendEmail(status) {
         sh 'echo ' + status
    }

